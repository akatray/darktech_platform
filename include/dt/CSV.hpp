#pragma once

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Imports.
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include <dt/Types.hpp>
#include <dt/OpsString.hpp>
#include <fstream>


// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// DarkTECH domain.
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
namespace dt::csv
{
	// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Load csv from stream.
	// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	auto load ( in& _Input ) -> vec<vec<str>>
	{
		auto Table = vec<vec<str>>();
		auto Record = str();

		while(!_Input.eof())
		{
			std::getline(_Input, Record);
			Table.push_back(ops_str::chop(Record, ','));
		}

		
		return Table;
	}


	// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Open file stream and forward it to loader.
	// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	auto load ( const str& _Filename ) -> vec<vec<str>>
	{
		auto Input = std::ifstream(_Filename);
		if(!Input.is_open()) throw ERR_FILENOTOPEN();


		return load(Input);
	}
}
